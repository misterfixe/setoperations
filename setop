#include <stdio.h>
#define m 5

void accept(int *ptr)
{
  for(int i=0;i<m;i++)
  {
    printf("%dth element:",i+1);
    scanf("%d",&ptr[i]);
  }
}

void display(int *ptr, int n){ 
printf("{"); 
for (int i = 0; i < n; i++) 
{ 
if (i==n-1) 
{ 
printf(" %d ",ptr[i]); 
} 
else{
printf(" %d,",ptr[i]); 
} 
} 
printf("}\n\n"); 
} 

int union_(int array1[], int array2[], int *union_array)
{ int k = 0; 
//adding all elements from first array 
  for (int i = 0; i < m; i++) 
  { 
    union_array[k] = array1[i]; 
    k++; 
  } 

//adding elements of array2 which are not in array1 
   for (int i = 0; i < m; i++) 
   { 
     int j=0; 
     for (j = 0; j < m; j++) 
     { 
      if (array2[i]==array1[j]) 
      { 
        break; 
      } 
     } 
     if (j==m) 
     {    
      union_array[k] = array2[i];
      k++; 
     } 
   } 
 return k; 
} 

int intersection(int array1[], int array2[], int *intersection_array)
{ 
  int k=0; 
//if element is present in both adding them to new array 
  for (int i = 0; i < m; i++) 
  {
    int j=0; 
    for (j = 0; j < m; j++) 
    { 
      if (array1[i]==array2[j]) 
      { 
        intersection_array[k] = array1[i]; 
        k++; 
        break; 
      } 
    } 
  } 
  return k; 
}

int difference(int array1[], int array2[], int *difference_array)
{ int k=0;
  for (int i = 0; i < m; i++) 
  { 
    int j=0; 
    for (j = 0; j < m; j++) 
    { 
      if (array1[i]==array2[j]) 
      { 
        break; 
      } 
    } 
    if (j==m) 
    { 
      difference_array[k] = array1[i];  
      k++; 
    } 
  } 
return k; 
} 

int symmetric_difference(int array1[], int array2[], int * symdiffer_array, int diff1, int diff2)
{ 
  int k = 0; 
//adding all elements from first array 
  for (int i = 0; i < diff1; i++) 
  { 
    symdiffer_array[k] = array1[i]; 
    k++; 
  }
//adding elements of array2 which are not in array1 
  for (int i = 0; i < diff1; i++) 
  { 
    int j=0; 
    for (j = 0; j < diff2; j++) 
    { 
      if (array2[i]==array1[j]) 
      { 
       break; 
      } 
    } 
    if (j==diff2) 
    { 
      symdiffer_array[k] = array2[i]; k++; 
    } 
  } 
 return k; 
}

int main(){ 
int array1[m], array2[m], union_array[2*m], intersection_array[m], difference_array_1[m], difference_array_2[m], symdiffer_array[m], n, i, j; 
printf("Enter First Set :\n"); 
accept(array1); 
display(array1, m); 
printf("Enter Second Set :\n"); 
accept(array2); 
display(array2, m); 
n = union_(array1, array2, union_array);

printf("Union Set :"); 
display(union_array, n); 
n = intersection(array1, array2, intersection_array); 
printf("Intersection Set :"); 
display(intersection_array, n); 
i = difference(array1, array2, difference_array_1);

printf("Difference Set :A - B :"); 
display(difference_array_1, i);
j = difference(array2, array1, difference_array_2); 

printf(" Difference Set:B - A :"); 
display(difference_array_2, j); 
n = symmetric_difference(difference_array_1, difference_array_2, symdiffer_array, i, j);

printf("Symmetric Difference Set:"); 
display(symdiffer_array, n); 

return 0; 
} 
